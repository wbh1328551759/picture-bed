{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loading.js","App.js","serviceWorker.js","index.js","models/index.js","stores/user.js","stores/history.js","stores/image.js","stores/auth.js","stores/index.js","logo.svg"],"names":["Header","styled","header","Logo","img","StyledLink","NavLink","Login","div","StyledButton","Button","Component","observer","history","useHistory","useStores","UserStore","AuthStore","src","LogoUrl","alt","to","activeClassName","exact","currentUser","attributes","username","type","onClick","logout","console","log","push","Footer","footer","Loading","Home","lazy","History","About","Register","App","fallback","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","AV","init","appId","appKey","serverURL","Auth","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginedUser","logIn","logOut","current","Uploader","add","file","filename","item","Object","avFile","File","set","save","serverFile","find","page","limit","query","Query","include","skip","equalTo","descending","results","this","observable","action","newList","list","concat","isLoading","append","length","hasMore","finally","newFilename","newFile","isUploading","values","pullUser","success","resetUser","warning","HistoryStore","reset","ImageStore","context","createContext","stores","useContext","module","exports"],"mappings":"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","file":"static/js/main.4690d948.chunk.js","sourcesContent":["import React from 'react'\r\nimport LogoUrl from '../logo.svg'\r\nimport {NavLink, useHistory} from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport {Button} from 'antd'\r\nimport { useStores} from '../stores'\r\nimport { observer } from 'mobx-react'\r\n\r\nconst Header = styled.header`\r\n  background-color: #02101f;\r\n  padding: 10px 100px;\r\n  display: flex;\r\n  align-items: center;\r\n  color: #fff;\r\n`\r\nconst Logo = styled.img`\r\n  height: 30px;\r\n`\r\nconst StyledLink = styled(NavLink)`\r\n  color: #fff;\r\n  margin-left: 30px;\r\n  &.active{\r\n    border-bottom: 1px solid #fff;\r\n  }\r\n`\r\nconst Login = styled.div`\r\n  margin-left: auto;\r\n`\r\nconst StyledButton = styled(Button)`\r\n  margin-left: 10px;\r\n`\r\n\r\nconst Component = observer(() => {\r\n\r\n  const history = useHistory()\r\n  const { UserStore, AuthStore } = useStores()\r\n\r\n  const handleLogout = () => {\r\n    AuthStore.logout()\r\n  }\r\n  const handleLogin = () => {\r\n    console.log('跳转到登陆')\r\n    history.push('/login')\r\n  }\r\n  const handleRegister = () => {\r\n    console.log('跳转到注册')\r\n    history.push('/register')\r\n  }\r\n\r\n  return (\r\n    <Header>\r\n      <Logo src={LogoUrl} alt=\"\"/>\r\n      <nav>\r\n        <StyledLink to=\"/\" activeClassName=\"active\" exact>首页</StyledLink>\r\n        <StyledLink to=\"/history\" activeClassName=\"active\">上传历史</StyledLink>\r\n        <StyledLink to=\"/about\" activeClassName=\"active\">关于我</StyledLink>\r\n      </nav>\r\n      <Login>\r\n        {\r\n          UserStore.currentUser ? <>\r\n            {UserStore.currentUser.attributes.username}\r\n            <StyledButton type=\"primary\" onClick={handleLogout}> 注销 </StyledButton>\r\n          </> : <>\r\n            <StyledButton type=\"primary\" onClick={handleLogin}> 登陆 </StyledButton>\r\n            <StyledButton type=\"primary\" onClick={handleRegister}> 注册 </StyledButton>\r\n          </>\r\n        }\r\n      </Login>\r\n    </Header>\r\n  )\r\n})\r\n\r\nexport default Component","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Footer = styled.footer`\r\n  padding: 10px 100px;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  color: #aaa;\r\n`\r\n\r\nfunction Component(){\r\n  return(\r\n    <Footer>\r\n      <p>Footer</p>\r\n    </Footer>\r\n  )\r\n}\r\n\r\nexport default Component","import React from 'react'\r\n\r\nfunction Loading() {\r\n  return(\r\n    <div>Loading...</div>\r\n  )\r\n}\r\nexport default Loading","import React, {Suspense, lazy} from 'react';\nimport './App.css';\nimport {Switch, Route} from 'react-router-dom'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Loading from './components/Loading'\n\nconst Home = lazy(() => import('./pages/Home'))\nconst History = lazy(() => import('./pages/History'))\nconst About = lazy(() => import('./pages/About'))\nconst Login = lazy(() => import('./pages/Login'))\nconst Register = lazy(() => import('./pages/Register'))\n\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <main>\n        <Suspense fallback={<Loading/>}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home/>\n            </Route>\n            <Route path=\"/history\">\n              <History/>\n            </Route>\n            <Route path=\"/about\">\n              <About/>\n            </Route>\n            <Route path=\"/login\">\n              <Login/>\n            </Route>\n            <Route path=\"/register\">\n              <Register/>\n            </Route>\n          </Switch>\n        </Suspense>\n      </main>\n      <Footer/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  HashRouter as Router\n} from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n      <App/>\n    </Router>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import AV, { User } from 'leancloud-storage'\r\n\r\nAV.init({\r\n  appId: \"XLoqMObGz7wzYW5qgyVwXtFg-gzGzoHsz\",\r\n  appKey: \"XzNPI1GhElaKDeYclGEFVjxM\",\r\n  serverURL: \"https://xloqmobg.lc-cn-n1-shared.com\"\r\n});\r\n\r\nconst Auth = {\r\n  register(username, password){\r\n    let user = new User();\r\n    user.setUsername(username);\r\n    user.setPassword(password);\r\n    return new Promise((resolve, reject) => {\r\n      user.signUp().then(loginedUser => resolve(loginedUser), error => reject(error))\r\n    })\r\n  },\r\n\r\n  login(username, password){\r\n    return new Promise((resolve, reject) => {\r\n      User.logIn(username, password).then(loginedUser => resolve(loginedUser), error => reject(error))\r\n    })\r\n  },\r\n\r\n  logout(){\r\n    User.logOut()\r\n  },\r\n\r\n  getCurrentUser(){\r\n    return User.current()\r\n  }\r\n}\r\n\r\nconst Uploader = {\r\n  add(file, filename){\r\n    const item = new AV.Object('Image')\r\n    const avFile = new AV.File(filename, file)\r\n    item.set('filename', filename)\r\n    item.set('owner', AV.User.current())\r\n    item.set('url', avFile)\r\n    return new Promise((resolve, reject) => {\r\n      item.save()\r\n        .then(serverFile => resolve(serverFile), error => reject(error))\r\n    })\r\n  },\r\n  find({page=0, limit=10}){\r\n    const query = new AV.Query('Image')\r\n    query.include('owner')\r\n    query.limit(limit)\r\n    query.skip(page*limit)\r\n    query.equalTo('owner', AV.User.current())\r\n    query.descending('createdAt')\r\n    return new Promise((resolve, reject) => {\r\n      query.find()\r\n        .then(results => resolve(results))\r\n        .catch(error => reject(error))\r\n    })\r\n  }\r\n}\r\n\r\nwindow.Uploader = Uploader\r\n\r\nexport {Auth, Uploader}","import { observable, action} from 'mobx'\r\nimport { Auth } from '../models'\r\n\r\nclass UserStore{\r\n  @observable currentUser = null\r\n\r\n  @action pullUser(){\r\n    this.currentUser = Auth.getCurrentUser()\r\n  }\r\n\r\n  @action resetUser(){\r\n    this.currentUser = null\r\n  }\r\n}\r\n\r\nexport default new UserStore()","import {observable, action} from 'mobx'\r\nimport {Uploader} from '../models'\r\nimport {message} from 'antd'\r\n\r\nclass HistoryStore {\r\n  @observable list = [];\r\n  @observable isLoading = false;\r\n  @observable hasMore = true;\r\n  @observable page = 0;\r\n  limit = 10;\r\n\r\n  @action append(newList) {\r\n    this.list = this.list.concat(newList);\r\n  }\r\n\r\n  @action find() {\r\n    this.isLoading = true;\r\n    Uploader.find({page: this.page, limit: this.limit})\r\n      .then(newList => {\r\n        this.append(newList);\r\n        this.page += 1 ;\r\n        if(newList.length < this.limit) {\r\n          this.hasMore = false;\r\n        }\r\n      }).catch(error => {\r\n      message.error('加载数据失败');\r\n    }).finally(() => {\r\n      this.isLoading = false;\r\n    });\r\n  }\r\n\r\n  @action reset(){\r\n    this.list = [];\r\n    this.isLoading = false;\r\n    this.hasMore = true;\r\n    this.page = 0;\r\n  }\r\n}\r\n\r\nexport default new HistoryStore()","import {observable, action} from 'mobx'\r\nimport {Uploader} from '../models'\r\nimport { message } from 'antd'\r\n\r\n\r\nclass ImageStore {\r\n  @observable filename = ''\r\n  @observable file = null\r\n  @observable isUploading = false\r\n  @observable serverFile = null\r\n\r\n  @action setFilename(newFilename) {\r\n    this.filename = newFilename\r\n  }\r\n\r\n  @action setFile(newFile) {\r\n    this.file = newFile\r\n  }\r\n\r\n  @action upload() {\r\n    this.isUploading = true\r\n    this.serverFile = null\r\n    return new Promise((resolve, reject) => {\r\n      Uploader.add(this.file, this.filename)\r\n        .then(serverFile => {\r\n          this.serverFile = serverFile\r\n          resolve(serverFile)\r\n        }).catch(error => {\r\n          message.error('上传失败')\r\n        }).finally(() => {\r\n          this.isUploading = false\r\n        })\r\n    })\r\n  }\r\n\r\n  @action reset(){\r\n    this.isUploading = false\r\n    this.serverFile = null\r\n  }\r\n}\r\n\r\nexport default new ImageStore()","import { observable, action} from 'mobx'\r\nimport { Auth } from '../models'\r\nimport UserStore from './user'\r\nimport { message } from 'antd'\r\nimport HistoryStore from './history'\r\nimport ImageStore from './image'\r\n\r\nclass AuthStore{\r\n  @observable values = {\r\n    username: '',\r\n    password: ''\r\n  }\r\n\r\n  @action setUsername(username){\r\n    this.values.username = username\r\n  }\r\n\r\n  @action setPassword(password){\r\n    this.values.password = password\r\n  }\r\n\r\n  @action login(){\r\n    return new Promise((resolve, reject) => {\r\n      Auth.login(this.values.username, this.values.password).then(user => {\r\n        UserStore.pullUser()\r\n        message.success('登陆成功')\r\n        resolve(user)\r\n      }).catch(error => {\r\n        UserStore.resetUser()\r\n        message.error('登陆失败')\r\n        reject(error)\r\n      })\r\n    })\r\n  }\r\n\r\n  @action register(){\r\n    return new Promise((resolve, reject) => {\r\n      Auth.register(this.values.username, this.values.password)\r\n        .then(user => {\r\n          UserStore.pullUser()\r\n          message.success('注册成功')\r\n          resolve(user)\r\n        }).catch(error => {\r\n          UserStore.resetUser()\r\n          message.error('注册失败')\r\n          reject(error)\r\n      })\r\n    })\r\n  }\r\n\r\n  @action logout(){\r\n    Auth.logout()\r\n    message.warning('已退出')\r\n    HistoryStore.reset()\r\n    UserStore.resetUser()\r\n    ImageStore.reset()\r\n  }\r\n}\r\n\r\nexport default new AuthStore()","import { createContext, useContext} from 'react'\r\nimport AuthStore from './auth'\r\nimport UserStore from './user'\r\nimport ImageStore from './image'\r\nimport HistoryStore from './history'\r\n\r\nconst context = createContext({\r\n  AuthStore,\r\n  UserStore,\r\n  ImageStore,\r\n  HistoryStore\r\n})\r\n\r\nwindow.stores = {\r\n  AuthStore,\r\n  UserStore,\r\n  ImageStore,\r\n  HistoryStore\r\n}\r\n\r\nexport const useStores = () => useContext(context)","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}